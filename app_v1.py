import streamlit as st
import pandas as pd
from prophet import Prophet
from prophet.plot import plot_plotly
import requests

# --- FONKSÄ°YONLAR BÃ–LÃœMÃœ (DeÄŸiÅŸiklik yok) ---
def calistir_analiz(veri_df):
    if veri_df.empty: return {"hata": "Filtrelenen veri bulunamadÄ±."}
    try:
        toplam_gelir = veri_df['Gelir'].sum(); toplam_gider = veri_df['Gider'].sum(); net_kar = toplam_gelir - toplam_gider
        gider_kategorileri = veri_df.groupby('Kategori')['Gider'].sum()
        en_yuksek_gider_kategorisi = gider_kategorileri.idxmax() if not gider_kategorileri.empty else "N/A"
        en_yuksek_gider_tutari = gider_kategorileri.max() if not gider_kategorileri.empty else 0
        urun_gelirleri = veri_df.groupby('Satilan_Urun_Adi')['Gelir'].sum()
        en_cok_gelir_getiren_urun = urun_gelirleri.idxmax() if not urun_gelirleri.empty else "N/A"
        return {"toplam_gelir": toplam_gelir, "toplam_gider": toplam_gider, "net_kar": net_kar, "en_yuksek_gider_kategorisi": en_yuksek_gider_kategorisi, "en_yuksek_gider_tutari": en_yuksek_gider_tutari, "en_cok_gelir_getiren_urun": en_cok_gelir_getiren_urun}
    except Exception as e: return {"hata": str(e)}

def doviz_kuru_getir():
    try:
        response = requests.get("https://api.exchangerate-api.com/v4/latest/TRY"); data = response.json()
        usd_kur = 1 / data['rates']['USD']; eur_kur = 1 / data['rates']['EUR']
        return {"USD": usd_kur, "EUR": eur_kur}
    except: return None

def prophet_tahmini_yap(aylik_veri_df):
    if len(aylik_veri_df) < 2: return None, None
    prophet_df = aylik_veri_df.reset_index().rename(columns={'Tarih': 'ds', 'Gelir': 'y'})
    model = Prophet(); model.fit(prophet_df)
    future = model.make_future_dataframe(periods=3, freq='M')
    forecast = model.predict(future)
    return model, forecast

# --- ANA UYGULAMA BÃ–LÃœMÃœ ---

st.set_page_config(page_title="AI Finans Paneli", layout="wide", initial_sidebar_state="expanded")
st.title("ðŸš€ AI Destekli Finansal Analiz Paneli v2.1")

# DEÄžÄ°ÅžÄ°KLÄ°K: Kenar Ã§ubuÄŸunu en baÅŸa taÅŸÄ±dÄ±k ve dosya yÃ¼kleyici ekledik
st.sidebar.header("Kontrol Paneli")

# YENÄ°: Dosya YÃ¼kleyici
uploaded_file = st.sidebar.file_uploader("Analiz iÃ§in CSV dosyanÄ±zÄ± buraya yÃ¼kleyin", type="csv")

# DEÄžÄ°ÅžÄ°KLÄ°K: TÃ¼m uygulama artÄ±k bir dosya yÃ¼klenip yÃ¼klenmediÄŸine baÄŸlÄ± Ã§alÄ±ÅŸacak
if uploaded_file is not None:
    # EÄŸer bir dosya yÃ¼klendiyse...
    ana_veri = pd.read_csv(uploaded_file, parse_dates=['Tarih'])
    
    st.sidebar.divider()
    st.sidebar.header("Filtreleme SeÃ§enekleri")
    urun_listesi = ["TÃ¼mÃ¼"] + sorted(ana_veri['Satilan_Urun_Adi'].unique().tolist())
    secilen_urun = st.sidebar.selectbox("ÃœrÃ¼ne GÃ¶re Filtrele:", urun_listesi)

    if secilen_urun == "TÃ¼mÃ¼":
        filtrelenmis_veri = ana_veri
    else:
        filtrelenmis_veri = ana_veri[ana_veri['Satilan_Urun_Adi'] == secilen_urun]
    
    # --- Analiz ve GÃ¶sterge Paneli ---
    kurlar = doviz_kuru_getir()
    if kurlar:
        st.subheader("AnlÄ±k Kurlar")
        col_kur1, col_kur2 = st.columns(2)
        col_kur1.metric("USD/TRY", f"{kurlar['USD']:.2f} â‚º")
        col_kur2.metric("EUR/TRY", f"{kurlar['EUR']:.2f} â‚º")
    st.divider()

    analiz_sonuclari = calistir_analiz(filtrelenmis_veri)
    if "hata" not in analiz_sonuclari:
        st.header(f"'{secilen_urun}' iÃ§in Finansal Durum")
        col1, col2, col3 = st.columns(3)
        col1.metric("Toplam Gelir", f"{analiz_sonuclari['toplam_gelir']} TL")
        col2.metric("Toplam Gider", f"{analiz_sonuclari['toplam_gider']} TL")
        col3.metric("Net Kar", f"{analiz_sonuclari['net_kar']} TL")
        
        st.divider()
        st.header(f"'{secilen_urun}' iÃ§in Profesyonel Gelir Tahmini")
        aylik_veri = filtrelenmis_veri.set_index('Tarih')[['Gelir']].resample('ME').sum()
        
        model, tahmin = prophet_tahmini_yap(aylik_veri)
        if model and tahmin is not None:
            fig = plot_plotly(model, tahmin, xlabel="Tarih", ylabel="Gelir")
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("Tahmin oluÅŸturmak iÃ§in yeterli veri bulunmuyor (en az 2 ay gerekir).")
    else:
        st.warning(f"'{secilen_urun}' iÃ§in gÃ¶sterilecek veri bulunmuyor.")

else:
    # YENÄ°: EÄŸer henÃ¼z dosya yÃ¼klenmediyse gÃ¶sterilecek karÅŸÄ±lama ekranÄ±
    st.info(" LÃ¼tfen analize baÅŸlamak iÃ§in sol taraftaki menÃ¼den bir CSV dosyasÄ± yÃ¼kleyin.")
    st.subheader("CSV DosyanÄ±z NasÄ±l OlmalÄ±?")
    st.markdown("""
    YÃ¼kleyeceÄŸiniz CSV dosyasÄ±, analizlerin doÄŸru Ã§alÄ±ÅŸmasÄ± iÃ§in aÅŸaÄŸÄ±daki sÃ¼tun baÅŸlÄ±klarÄ±nÄ± iÃ§ermelidir:
    - `Tarih` (YYYY-AA-GG formatÄ±nda, Ã¶rn: 2025-01-15)
    - `Gelir` (SayÄ±sal deÄŸer)
    - `Gider` (SayÄ±sal deÄŸer)
    - `Kategori` (Giderin kategorisi, Ã¶rn: MaaÅŸ, Kira)
    - `Satilan_Urun_Adi` (SatÄ±lan Ã¼rÃ¼nÃ¼n veya hizmetin adÄ±)
    
    Ã–rnek olarak projemizde kullandÄ±ÄŸÄ±mÄ±z `ornek_veri.csv` dosyasÄ±nÄ± kullanabilirsiniz.
    """)